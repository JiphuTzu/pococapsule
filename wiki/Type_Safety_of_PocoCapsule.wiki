#summary A brief note on type safety of PocoCapsule.
#labels Phase-Design

== Type Safety in C++ ==

Type safety in C++ means language type systems are able to detect and prohibit invalid type conversions. Some common type operations are summarized in the following table:

|| *type operation* || *allowed conversion* || *note* || 
|| implicit conversion || up type hierarchy || static and safe  ||  
|| dynamic_cast || within type hierarchy || safe, but relies on RTTI ||
|| static_cast || within type hierarchy || unsafe on down and horizontal casts || 
|| C-style or reinterpret_cast || any to any || unsafe (1) ||
|| C-style or reinterpret_cast to/from opaque || any to any || unsafe and error prone (2) ||

 # C-style type cast and reinterpret_cast operations allow any types to be converted to any other types. These casts include conversions up, down, and horizontal within type hierarchies, as well as across hierarchies. For valid conversions with in type hierarchies, these casts generate correct results. However, these casts do not detect or prohibit invalid down and horizontal casts within hierarchies and wrong type casts that across hierarchies. 
 # C-style type cast and reinterpret_cast to/from opaque allow any types to be converted to/from opaques (such as void pointers, char or uchar pointers, integers). These casts do not detect or prohibit invalid down and horizontal casts within hierarchies and wrong type casts that across hierarchies. And worse, these casts completely bypass the language type system and could generate incorrect results even in valid type cast cases, such as up casting a multi-inherited child class to its parent classes. These two kinds of type casts are not safe in general, unless the opaques are casted back to their exactly original casted-from types without moving up or down in their hierarchies.

== Type Safety in PocoCapsule == 

Type safety in dependency-injection scenarios is ensured by the following two rules in PocoCapsule:

  * IoC proxies only apply implicit type conversions (for non-opaques).
  * IoC proxies use C-style type casts only to convert bean reference opaques back to their exactly original casted-from types (which are types declared in application descriptions).

The above two rules ensure 100% type safety in _dependency injection_ usage scenarios, namely dependency references are injected as IoC invocation input parameters. Type conversion errors will be reported by C++ compilers on building proxies. 

Type safety in _directory-lookup_ scenarios is ensured by either of the following two rules in casting a bean reference opaque retrieved from a PocoCapsule bean directory (application context):

  * The user should specifies the bean's type-id on retrieving its reference opaque from the directory. This specifies the type id of the original declared type. User should only cast the opaque to the exactly type before perform further casts. For instance:
{{{
 Foo* ref = (Foo*)ctxt->getBean("my-foo-bean", "Foo");
 if( ref == NULL ) {
    // could be a type error ...
 } 
}}}

  * The user should retrieve the bean's type-id from the directory (use the getBeanPtrTypeId() method on the application context). This is the pointer type id of the original declared type. User should only cast the opaque to the exactly type before perform further casts.
{{{
 Foo* ref = (Foo*)ctxt->getBean("my-foo-bean");
 const char* ptr_type_id = ctxt->getBeanPtrTypeId("my-foo-bean");
 if( ref!= NULL && strcmp(ptr_type_id, "Foo*") ) {
    // type error ...
 } 
}}}

== Miscellaneous ==
  * Type safety is not binary compability.
  * PocoCapsule type system treats different declared bean type ids as distinct types, without knowing C++ typedef etc.
  * Implicit type conversions in PocoCapsule are not performed by PocoCapsule type system dynamically, but utilize C++ type system in the generated proxies. 

 