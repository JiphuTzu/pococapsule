<?xml version='1.0' encoding='UTF-8'?>

<!--
	Copyright 2006, by Pocomatic Software, LLC. All Rights Reserved.  

	OASIS Open Composite Service Architect (OCSA) descriptor DTD 
-->

<!ELEMENT composite ((service|property|component|reference|wire)*)>
<!ATTLIST composite name CDATA	#IMPLIED>

<!ELEMENT service ((interface.cpp|interface.wsdl)?, (binding.ws)*, reference*)>
<!ATTLIST service name CDATA	#REQUIRED>

<!--
	A <reference> element can be used in either composite or
	component scope. When used in composite scope, it associates
	an external (outside of this composite) service endpoint with
	the name of this composite. This name can be used within this
	composite to refer this external service.

	When a <reference> is used in component scope, the it refers
	an dependency injection to the component. The name of this
	<reference> element is used as the injection setter operation
	to inject the value (a service refererence). The value of
	this element must be the name of another <component> element 
	or the name of a composite <reference> within this <composite>.
-->
<!ELEMENT reference (#PCDATA|interface.cpp|interface.wsdl|binding.ws|reference)*>

<!--
	name of this reference (if used in composite scope), or 
	injection operation method name (if used in component scope).
-->
<!ATTLIST reference name CDATA	#IMPLIED>

<!--
	A <interface.cpp> or <interface.wsdl> element can be used as 
	a child element of a composite <reference> element. The interface
	attribute of it (either an <interface.cpp> or an <interface.wsdl>)
	specifies the reference's stub class or portType name.
-->
<!ELEMENT interface.cpp	EMPTY>
<!ATTLIST interface.cpp	interface	CDATA	#REQUIRED>
<!ELEMENT interface.wsdl EMPTY>
<!ATTLIST interface.wsdl interface	CDATA	#REQUIRED>

<!--
	a <binding.ws> can be used as child of a composite <service>
	or composite <reference> element. 

	When a <binding.ws> is used as a child of <service>, it specifies 
	a web service binding. In this case, its port attribute should 
	be in the format of: 

	  "...#wsdl.endpoint(<service-name>[/<port-or-endpoint-name>])".

	Here, the port-or-endpoint-name portion is optional. The 
	service-name uri will be used to export this service. Multiple 
	binding.ws with different service-name can appear under a given
	<service>, to export the serice in multiple different names.

	When a <binding.ws> is used as a child of composite <reference>,
	it specifies the address of an external web services. Its port
	attribute should be in the format of:

	  "http://<host>[:port]/<service-name>[#wsdl.endpoint(...)]".

	Here, the #wsdl.endpoint(...) portion is ignored. If a composite
	<reference> is defined without a <binding.ws>, the wsdl binding
	address will be used.
-->
<!ELEMENT binding.ws	EMPTY>
<!ATTLIST binding.ws	port	CDATA	#REQUIRED>

<!--
	A component instance is a plain old C++ object (POCO) instance.
	It has setter (setting property) operations, and dependency
	injection operations to inject other dependent reference.
-->
<!ELEMENT component (implementation.cpp?, (service|reference|property)*)>

<!--
	The name of this component. It can be used as value of another
	component <reference> or as value of <source.uri> or part of the
	value of <target.uri> of a <wire> element to refer this component.
-->
<!ATTLIST component name ID	#IMPLIED>

<!--
	A implementation.cpp element of a component specifies the C++ 
	implementation of a component. The class attribute of this 
	element is the C++ class name, for instance:

	<component name=...>
		<implementation.cpp class="MyNameSpace::MyClass"/>
		...
	</component>
-->
<!ELEMENT implementation.cpp EMPTY>
<!ATTLIST implementation.cpp class	CDATA	#REQUIRED>

<!--
	A <property> element can be used in either composite or 
	component scope. A composite property can be refered by 
	the 'source' attribute of other component properties by its
	name. E.g.

	<composite>
		...
		<property type="xsd:string" name="currency">EURO</property>

		...

		<component>
			..
			<property name="set_currency" source="$currency"/>
		</component>
	</composite>
-->
<!ELEMENT property (#PCDATA)>

<!--
	For composite property, the 'name' attribute must be unique within the scope of the 
	composite and it will be used as the key to resolve the 'source' attribute of a 
	component property.

	For component property, the 'name' attribute is the setter's operation name of the 
	component property. 
-->
<!ATTLIST property name	CDATA	#REQUIRED>

<!--
        valid type of property
-->
<!ENTITY % type 'xsd:boolean|xsd:string|xsd:short|xsd:unsignedShort|xsd:int|xsd:unsignedInt|xsd:byte|xsd:float|xsd:double|xsd:unsignedByte'>

<!--
	data type of the property.
-->
<!ATTLIST property type	(%type;)	"xsd:string">

<!--
	value of this attribute must be in the form of:
	"$<id-of-a-composite-property>". If source attribute
	is used, the value and type of the that composite 
	property will be used as the value and type of the property.
-->
<!ATTLIST property source CDATA	#IMPLIED>

<!--
	<wire> element wiring a service provider reference (represented
	via the <source.uri> element) with a service user's port (
	represented via the <target.uri> element). The value of the
	<source.uri> should be a valid name of a component within the
	composite. The value of the <target.uri> should be in the form
	of <component-name>/<port-name>. 
-->
<!ELEMENT wire (source.uri, target.uri)>
<!ELEMENT source.uri (#PCDATA)>
<!ELEMENT target.uri (#PCDATA)>
