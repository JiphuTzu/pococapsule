<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE poco-application-context 
	SYSTEM "http://www.pocomatic.com/poco-application-context.dtd">

<!--
	This example demonstrates several simple forms of IoC using PocoCapsule 
	(Note: PocoCapsule supports far more than these forms of IoC).

	* Instantiate a bean of C++ class Foo using its constructor with a
	  string as input parameter. A destroy-method, the delete operator, of 
	  this bean is also declared.

	* A post-instantiation ioc method hello() on the bean.

	* A post-instantiation ioc function, the C printf() function, 
	  without target (therefore, called as a global or static function).

	* A post-instantiation ioc function, the C++ << operator on std::cout.

	See the README.html for detail.
-->

<poco-application-context>
   <load library="./foo.$dll"/>
   <load library="./reflx.$dll"/>

   <bean class="Foo"
	 destroy-method="delete"
         depends-on="do-this-first"
         lazy-init="false">
        <method-arg type="cstring" value="Foo constructor!"/>
        <ioc method="hello">
		<method-arg type="cstring" value="Foo hello()!"/>
	</ioc>
   </bean>

   <bean id="do-this-first" class="void">
	<ioc method="printf">
        	<method-arg type="cstring" value="Hello %s\n"/>
        	<method-arg type="cstring" value="C stdio printf()!"/>
	</ioc>

	<ioc method="std::cout {{">
        	<method-arg type="cstring" value="Hello C++ std::cout!\n"/>
	</ioc>
   </bean>
</poco-application-context>
